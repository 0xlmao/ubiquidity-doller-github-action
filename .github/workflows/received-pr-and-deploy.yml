name: Received PR and Deploy

on:
  workflow_run:
    workflows: ["Install and Build Workflow"]
    types:
      - completed

jobs:
  receive-pr-and-deploy:
    runs-on: ubuntu-latest
    env:
      NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    steps:
      - name: "Download artifact"
        uses: actions/github-script@v3.1.0
        with:
          script: |
            var artifacts = await github.actions.listWorkflowRunArtifacts({
               owner: context.repo.owner,
               repo: context.repo.repo,
               run_id: ${{github.event.workflow_run.id }},
            });
            var matchArtifact = artifacts.data.artifacts.filter((artifact) => {
              return artifact.name == "pr"
            })[0];
            var download = await github.actions.downloadArtifact({
               owner: context.repo.owner,
               repo: context.repo.repo,
               artifact_id: matchArtifact.id,
               archive_format: 'zip',
            });
            var fs = require('fs');
            fs.writeFileSync('${{github.workspace}}/pr.zip', Buffer.from(download.data));
      - name: Extract files
        run: unzip pr.zip && unzip pull-request.zip && ls

      - name: Deploy Development
        run: |
          netlify link --id ${{ secrets.NETLIFY_SITE_ID_DEVELOPMENT }}
          netlify deploy --prod > ./deployments.log

      - name: Print Logs
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            let fs = require('fs');
            let pr_info = fs.readFileSync('./pr_number').toString('utf-8');
            console.log({pr_info});
            let substrs = pr_info.split(',');
            let event_name = substrs[0].split('=')[1];
            let pr_number = substrs[1].split('=')[1] ?? 0;
            let sha = substrs[2].split('=');
            let deployments_log = fs.readFileSync('./deployments.log')
            if (event_name == 'pull_request') {
              console.log("Commenting on the pull request");
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: pr_number,
                body: deployments_log.toString()
              });
            } else {
              console.log("Commenting on the commit");
            }
